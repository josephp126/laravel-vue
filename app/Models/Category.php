<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * Class Category
 * @package  App\Models
 * @observer App\Observers\CategoryObserver
 */
class Category extends Model
{
    use HasFactory, SoftDeletes;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name',
        'parent_id',
        'subcategories',
        'root_id',
        'img',
        'order',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'id'        => 'integer',
        'parent_id' => 'integer',
        'root_id'   => 'integer',
    ];

    protected $appends = ['updated_at_formatted'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::addGlobalScope(
            'order',
            function ($builder) {
                $builder->orderBy('order', 'asc');
            }
        );
    }

    public function image()
    {
        return $this->morphOne(Image::class, 'imageable');
    }

    public function children()
    {
        return $this->hasMany(__CLASS__, 'parent_id', 'id')->ordered();
    }

    public function sub_categories()
    {
        return $this->children()->with(['sub_categories', 'products']);
    }

    public function scopeOrdered($query)
    {
        return $query->orderBy('order')->orderBy('name');
    }

    public function products()
    {
        return $this->belongsToMany(Product::class, 'product_categories');
    }

    public function getUpdatedAtFormattedAttribute()
    {
        return $this->updated_at->format(config('app.formats.table_datetime'));
    }

    public function getImgAttribute()
    {
        return $this->image->url ?? url('/images/broken.png');
    }

    public static function scopeChildrenRecursively($query, $parent = null)
    {
        return $query->where('parent_id', $parent)->with(['products', 'sub_categories']);
    }
}
